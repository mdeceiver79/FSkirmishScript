int[] scenario getRanks() {
	int passIncludesSwap = 1;
	int output[];
	for (int player = 1; player <= 8; player++) { 
		output[player] = player;
	}
	while ( passIncludesSwap == 1 ) {
		passIncludesSwap = 0;
		for ( int j = 1; j < output.length-1; j++ ) {
			int i = j+1;
			if ( score(output[i]) > score(output[j]) ) {
				int iVal = output[i];
				int jVal = output[j];
				output[i] = jVal;
				output[j] = iVal;
				passIncludesSwap = 1;
			}
		}
	}
	return output;
}

int scenario iPositionOf( int input[], int element ) {
	int position = -1;
	for (int i =0; i < input.length; i++) { 
		if ( input[i] == element ) {
			return i;
		}
	}
	return position;
}

int scenario printIntArray( int iArray[] ) {
	string noodle = "";
	for (int i =0; i < iArray.length; i++) { 
		noodle = noodle + "," + iArray[i];
	}
	print_game_msg(noodle);
}

int scenario countMilitaryUnitsInRadius ( localPlayer, x, y, radius ) {

	int unitCounter = 0;
	int unitCount = num_military_units ( localPlayer );
	for (int i = 0; i < unitCount; i ++) {
		int localUnitId = find_military ( localPlayer );
		if ( object_near(localPlayer, localUnitId, x, y, radius) ) {
			unitCounter = unitCounter + 1;
		}
	}
	return unitCounter;
}

int scenario eventDialog( int events_modalDialog, string message ) {
	int dialogStrings[];
	if ( events_modalDialog == 1 ) {
		int eventDialogMessage = popup_choice( message, $S("Ok"), $S("") );
	} else {
		print_game_msg(message);
	}
}

int scenario getIndexOfString ( string[] arrayArg, string elementArg ) {
	for (int index = 0; index < arrayArg.length; index++) {
		if ( arrayArg[index] == elementArg ) {
			return index;
		}
	}
	return -1;
}

int scenario makeUnitsInArray ( string[] units, count, player, x, y ) {
	for (int unitCount = 0; unitCount < count; unitCount++) { 	
		newUnit = units[rand_int(0, units.length)];
		create_unit(player, x, y, newUnit, 1);	
	}
	return 1;
}

string scenario culture( player ) {
	player_nation = find_nation(player);
	if ( player_nation == "bantu" && player_nation == "nubians" ) {
		return "africa";
	} else if ( player_nation == "egyptians" && player_nation == "persian" && player_nation == "turks" ) {
		return "arab";
	} else if ( player_nation == "iroquois" && player_nation == "lakota" ) {
		return "northAmerica";
	} else if ( player_nation == "aztecs" && player_nation == "inca"  && player_nation == "maya" ) {
		return "southAmerica";
	} else if ( player_nation == "japanese" && player_nation == "koreans" ) {
		return "pacific";
	} else if ( player_nation == "british" && player_nation == "french" && player_nation == "germans" && player_nation == "americans" && player_nation == "dutch" ) {
		return "european";
	} else if ( player_nation == "spanish" && player_nation == "greeks" && player_nation == "romans" ) {
		return "mediterranean";
	} else if ( player_nation == "russians" && player_nation == "mongols" && player_nation == "chinese" && player_nation == "indians" ) {
		return "asia";
	}
	return "";
}

scenario {
	
	static int DOCTRINE_HITTITE = 0;
	static int DOCTRINE_ROMAN = 1;
	static int DOCTRINE_GREEK = 2;
	static int DOCTRINE_PERSIAN = 3;
	static int DOCTRINE_FRENCH = 4;
	static int DOCTRINE_HUN = 5;
	static int DOCTRINE_RUSSIAN = 6;
	
	static int DOCTRINE_PIKESHOTT = 7;
	static int DOCTRINE_OLDFASHIONED = 8;
	static int DOCTRINE_ROYALISTS = 9;
	static int DOCTRINE_MONGOL = 10;
	
	static int DOCTRINE_GRENADIERS = 11;
	static int DOCTRINE_SKERMISHERS = 12;
	static int DOCTRINE_LIGHTBRIGADE = 13;
	static int DOCTRINE_PRUSSIAN = 14;
	static int DOCTRINE_OTTOMAN = 15;
	
	static int DOCTRINE_ARTILLERYCORP = 16;
	static int DOCTRINE_MOBILECORP = 17;
	static int DOCTRINE_HEAVYCORP = 18;
	static int DOCTRINE_DEATHCORP = 19;
	
	static int DOCTRINE_EXPEDITIONARY = 20;
	static int DOCTRINE_BLITZKRIEG = 21;
	static int DOCTRINE_HUMANWAVE = 22;
	
	static int DOCTRINE_MECHANISED = 23;
	static int DOCTRINE_HEAVY = 24;
	static int DOCTRINE_ARIAL = 25;
	
	static int DOCTRINE_ARMOURED = 26;

	static int sectimeoffset = 0;
	static int DEBUG = 0;
	
	static string ageTech[] = ["Ancient Age", "Classical Age", "Medieval Age", "Gunpowder Age", "Enlightenment Age","Industrial Age", "Modern Age", "Information Age"];

	static int core_playerCounter = 0;
	static int core_playerIsPlaying[];
	static int core_playerRank[];
	static string core_nations[] = ["aztecs","bantu","british","chinese","egyptians","french","germans","greeks","inca","japanese","koreans","maya","mongols","nubians","romans","russians","spanish","turks","americans","dutch","indians","iroquois","lakota","persian","default"];
	
	static int doctrine_useDoctrine = 1;
	
	static string doctrine_usesHorses[] = ["mongols", "lakota"];
	static string doctrine_usesHI[] = ["japanese", "spanish", "germans"];
	static string doctrine_usesMusketeers[] = ["british", "french", "russians", "turks", "americans", "iroquois", "germans"];// this allows the players to use doctrines which include musketeers
	static string doctrine_usesEnlightenmentRC[] = ["lakota", "nubians"]; // these guys have custom ranged cavalry in the enlightenment age, we want them to take advantage of that.
	
	static string doctrine_unit[][];
	static int doctrine_percent[][];
	
	// DOCTRINE_HITTITE 
	// ["Slingers", "Slingers", "Hoplites", "Horse Archer"]
	doctrine_unit[DOCTRINE_HITTITE] = [ "Slingers", "Horse Archer" ];
	doctrine_percent[DOCTRINE_HITTITE] = [ 50, 25 ];
	
	// DOCTRINE_ROMAN
	// ["Slingers", "Hoplites", "Hoplites", "Light Horse"]
	doctrine_unit[DOCTRINE_ROMAN] = [ "Hoplites", "Slingers", "Light Horse" ];
	doctrine_percent[DOCTRINE_ROMAN] = [ 43, 26, 20 ];
	
	// DOCTRINE_GREEK
	// ["Slingers", "Hoplites", "Hoplites", "Cataphract"]
	doctrine_unit[DOCTRINE_GREEK] = [ "Hoplites", "Slingers", "Cataphract" ];
	doctrine_percent[DOCTRINE_GREEK] = [ 52, 20, 15 ];
	
	// DOCTRINE_PERSIAN
	// ["Horse Archer", "Hoplites", "Hoplites", "Cataphract"]
	doctrine_unit[DOCTRINE_PERSIAN] = [ "Hoplites", "Horse Archer", "Cataphract" ];
	doctrine_percent[DOCTRINE_PERSIAN] = [ 30, 20, 20 ];
	
	// DOCTRINE_FRENCH
	// ["Bowmen", "Hoplites", "Cataphract"]
	doctrine_unit[DOCTRINE_FRENCH] = [ "Hoplites", "Bowmen", "Cataphract" ];
	doctrine_percent[DOCTRINE_FRENCH] = [ 30, 20, 20 ];
	
	// DOCTRINE_HUN
	// ["Slingers", "Horse Archer", "Light Horse", "Horse Archer", "Cataphract"]
	doctrine_unit[DOCTRINE_HUN] = [ "Slingers", "Light Horse", "Horse Archer", "Cataphract" ];
	doctrine_percent[DOCTRINE_HUN] = [ 17, 33, 17, 17 ];
	
	// DOCTRINE_RUSSIAN
	// ["Slingers", "Horse Archer", "Light Horse","Hoplites"]
	doctrine_unit[DOCTRINE_RUSSIAN] = [ "Slingers", "Horse Archer", "Light Horse", "Hoplites" ];
	doctrine_percent[DOCTRINE_RUSSIAN] = [ 17, 17, 20, 20 ];
	
	
	// DOCTRINE_PIKESHOTT
	// ["Hoplites","Hoplites","Hoplites","Hoplites","Slingers","Slingers","Slingers","Slingers","Light Horse", "Horse Archer"]
	doctrine_unit[DOCTRINE_PIKESHOTT] = [ "Hoplites", "Slinger", "Light Horse", "Horse Archer" ];
	doctrine_percent[DOCTRINE_PIKESHOTT] = [ 35, 35, 8, 8 ];
	
	// DOCTRINE_OLDFASHIONED // same as french
	// ["Hoplites","Hoplites","Hoplites","Bowmen","Bowmen","Bowmen","Cataphract", "Cataphract"]
	doctrine_unit[DOCTRINE_OLDFASHIONED] = [ "Hoplites", "Bowmen", "Cataphract" ];
	doctrine_percent[DOCTRINE_OLDFASHIONED] = [ 30, 30, 20 ];
	
	// DOCTRINE_ROYALISTS
	// ["Hoplites","Slingers","Hoplites","Slingers","Cataphract", "Horse Archer"]
	doctrine_unit[DOCTRINE_ROYALISTS] = [ "Hoplites", "Slingers", "Cataphract", "Horse Archer" ];
	doctrine_percent[DOCTRINE_ROYALISTS] = [ 20, 20, 10, 10 ];
	
	// DOCTRINE_MONGOL
	// ["Cataphract", "Cataphract", "Horse Archer","Light Horse", "Horse Archer"]
	doctrine_unit[DOCTRINE_MONGOL] = [ "Cataphract", "Horse Archer","Light Horse" ];
	doctrine_percent[DOCTRINE_MONGOL] = [ 35, 35, 13 ];
	
	
	// DOCTRINE_GRENADIERS
	// ["Hoplites", "Hoplites", "Cataphract"]
	doctrine_unit[DOCTRINE_GRENADIERS] = [ "Hoplites", "Cataphract" ];
	doctrine_percent[DOCTRINE_GRENADIERS] = [ 54, 25 ];
	
	// DOCTRINE_SKERMISHERS
	// ["Slingers", "Hoplites", "Cataphract"]
	doctrine_unit[DOCTRINE_SKERMISHERS] = [ "Slingers", "Hoplites", "Cataphract" ];
	doctrine_percent[DOCTRINE_SKERMISHERS] = [ 24, 30, 25 ];
	
	// DOCTRINE_LIGHTBRIGADE
	// ["Slingers", "Hoplites", "Light Horse", "Horse Archer"]
	doctrine_unit[DOCTRINE_LIGHTBRIGADE] = [ "Slingers", "Hoplites", "Light Horse", "Horse Archer" ];
	doctrine_percent[DOCTRINE_LIGHTBRIGADE] = [ 13, 13, 27, 27 ];
	
	// DOCTRINE_PRUSSIAN
	// ["Hoplites", "Hoplites", "Light Horse", "Horse Archer"]
	doctrine_unit[DOCTRINE_PRUSSIAN] = [ "Slingers", "Horse Archer", "Cataphract", "Hoplites" ];
	doctrine_percent[DOCTRINE_PRUSSIAN] = [ 27, 13, 27, 13 ];
	
	// DOCTRINE_OTTOMAN
	// ["Hoplites","Hoplites","Hoplites","Hoplites","Hoplites","Hoplites","Catapult", "Light Horse"]
	doctrine_unit[DOCTRINE_OTTOMAN] = [ "Hoplites", "Catapult", "Light Horse", "Slingers" ];
	doctrine_percent[DOCTRINE_OTTOMAN] = [ 35, 10, 15, 20 ];
	

	// DOCTRINE_ARTILLERYCORP
	// ["Slingers", "Slingers", "Slingers", "Slingers", "Slingers", "Hoplites", "Catapult", "Machine Gun"]
	doctrine_unit[DOCTRINE_ARTILLERYCORP] = [ "Slingers", "Hoplites", "Catapult", "Machine Gun" ];
	doctrine_percent[DOCTRINE_ARTILLERYCORP] = [ 55, 11, 15, 11 ];
	
	// DOCTRINE_MOBILECORP
	// ["Slingers", "Slingers", "Slingers", "Slingers", "Slingers", "Cataphract", "Light Horse", "Machine Gun"]
	doctrine_unit[DOCTRINE_MOBILECORP] = [ "Slingers", "Cataphract", "Horse Archer", "Machine Gun" ];
	doctrine_percent[DOCTRINE_MOBILECORP] = [ 55, 13, 13, 11 ];
	
	// DOCTRINE_HEAVYCORP
	// ["Slingers", "Slingers", "Slingers", "Slingers", "Slingers", "Cataphract"]
	doctrine_unit[DOCTRINE_HEAVYCORP] = [ "Slingers", "Cataphract" ];
	doctrine_percent[DOCTRINE_HEAVYCORP] = [ 67, 17 ];
	
	// DOCTRINE_DEATHCORP
	// ["Slingers", "Slingers", "Slingers", "Slingers", "Slingers", "Catapult", "Catapult", "Machine Gun", "Hoplites"]
	doctrine_unit[DOCTRINE_DEATHCORP] = [ "Slingers", "Hoplites", "Catapult", "Machine Gun", "Cataphract" ];
	doctrine_percent[DOCTRINE_DEATHCORP] = [ 48, 9, 9, 9, 9  ];
	
	// DOCTRINE_EXPEDITIONARY
	// ["Slingers", "Slingers", "Slingers", "Slingers", "Hoplites", "Hoplites" "Catapult", "Catapult", "Machine Gun"]
	doctrine_unit[DOCTRINE_DEATHCORP] = [ "Slingers", "Hoplites", "Catapult", "Machine Gun", "Horse Archer"];
	doctrine_percent[DOCTRINE_DEATHCORP] = [ 48, 9, 9, 9, 9  ];
	
	
	// DOCTRINE_BLITZKRIEG
	// ["Slingers", "Slingers", "Machine Gun", "Cataphract","Light Horse","Bomber"]
	doctrine_unit[DOCTRINE_DEATHCORP] = [ "Slingers", "Hoplites", "Catapult", "Machine Gun", "Horse Archer", "Bomber" ];
	doctrine_percent[DOCTRINE_DEATHCORP] = [ 20, 10, 10, 10, 10, 10  ];
	
	// DOCTRINE_HUMANWAVE
	// [ "Slingers", "Slingers", "Machine Gun", "Slingers", "Slingers", "Slingers", "Hoplites" ]
	doctrine_unit[DOCTRINE_DEATHCORP] = [ "Slingers", "Hoplites", "Machine Gun" ];
	doctrine_percent[DOCTRINE_DEATHCORP] = [ 75, 15, 15 ];
	
	// DOCTRINE_ARMOURED
	doctrine_unit[DOCTRINE_ARMOURED] = [ "Slingers", "Hoplites", "Machine Gun", "Cataphract" ];
	doctrine_percent[DOCTRINE_ARMOURED] = [ 55, 15, 15, 20 ];
	
	
	// DOCTRINE_MECHANISED
	// [ "Slingers", "Slingers", "Machine Gun", "Hoplites", "Light Horse", "Light Horse","Bomber" ]
	doctrine_unit[DOCTRINE_MECHANISED] = [ "Slingers", "Hoplites", "Machine Gun", "Light Horse", "Bomber" ];
	doctrine_percent[DOCTRINE_MECHANISED] = [ 30, 15, 15, 30, 15 ];
	
	// DOCTRINE_HEAVY
	// [ "Slingers", "Slingers", "Slingers", "Machine Gun", "Cataphract","Bomber" ]
	doctrine_unit[DOCTRINE_MECHANISED] = [ "Slingers", "Machine Gun", "Cataphract", "Bomber" ];
	doctrine_percent[DOCTRINE_MECHANISED] = [ 54, 18, 18, 18 ];
	
	// DOCTRINE_ARIAL
	// [ "Slingers", "Slingers", "Slingers", "Machine Gun", "Attack Helicopter","Bomber" ]
	doctrine_unit[DOCTRINE_ARIAL] = [ "Slingers", "Machine Gun", "Attack Helicopter", "Bomber" ];
	doctrine_percent[DOCTRINE_ARIAL] = [ 54, 18, 18, 18 ];
	
	static int doctrine_player[][];
	
	static int events_cityTickBase = 128; // basically the time between a city being "ticked"
	static int events_canFamine = 0; // this will enable periodic famine toggling
	static int events_famine = 0; // this will kill off farms periodically
	static int events_modalDialog = 0;
	
	static int timed_useTimed = 0;
	static int timed_useTimedEnchanced = 0;
	static int timed_gameLength = 3600; // 1 hour
	static int timed_timePerAge = 450;
	
	static int acension_useAscension = 0;
	static int acension_playersPerAge;
	
	static int upkeep_useUpkeep = 1;
	static float upkeep_rate = 1;
	static float upkeep_aiModifier = 1;
	
	static int general_useGeneral = 1;
	static int general_player[] = [0,0,0,0,0,0,0,0,0]; // 0 is no general, 1 is default, 2 alexander, 3 darius, 4 napoleon, 5 genghis, 6 ceaser, 7 hannibal, 8 Charlemagne, 9 Indian General, 10 saladin, 11 Chu-ko Liang
	static int general_canAlexander = 1;
	static int general_canDarius = 1;
	static int general_canNapoleon = 1;
	static int general_canGenghis = 1;
	static int general_canCeaser = 1;
	static int general_canHannibal = 1;
	static int general_canCharlemagne = 1;
	static int general_canIndianGeneral = 1;
	static int general_canSaladin = 1;
	static int general_canChukoLiang = 1;
	
	static baseDifficulty = 5; // we save this for later on.
	
	run_once {
		
		// init core
		print_game_msg("Initialising...");
		for (int player = 1; player <= 8; player++) { 	
			core_playerIsPlaying[player] = 0;
			if ( age(player) != -1 ) {
				core_playerIsPlaying[player] = 1;
				core_playerCounter++;
			}
		}

		// if ( useNoNukes == 1 ) {
			// print_game_msg("Nukes disabled!");
			// disable_type("Nuclear ICBM");
			// disable_type("Nuclear Missile");
		// }
		
		// Doctrine Stuff
		// for each player we work out what their doctrines will be
		for ( player = 1; player <= 8; player++ ) {
			int playerAge = age(player);
			int doctrineIndex = 0; // local index
			
			doctrine_doctrinesAncient = [DOCTRINE_ROMAN, DOCTRINE_FRENCH, DOCTRINE_HUN, DOCTRINE_RUSSIAN, DOCTRINE_HITTITE, DOCTRINE_GREEK, DOCTRINE_PERSIAN ];
			if ( getIndexOfString( doctrine_usesHorses, find_nation(player) ) != -1 ) {
				doctrine_doctrinesAncient = [DOCTRINE_HUN, DOCTRINE_MONGOL];
			} else if ( find_nation(player) == "romans" ) {
				doctrine_doctrinesAncient = [DOCTRINE_ROMAN];
			} else if ( find_nation(player) == "greeks" ) {
				doctrine_doctrinesAncient = [DOCTRINE_GREEK];
			} else if ( find_nation(player) == "persian" ) {
				doctrine_doctrinesAncient = [DOCTRINE_PERSIAN];
			} else if ( getIndexOfString( doctrine_usesHI, find_nation(player) ) != -1  ) {
				doctrine_doctrinesAncient = [DOCTRINE_ROMAN, DOCTRINE_GREEK, DOCTRINE_FRENCH, DOCTRINE_RUSSIAN, DOCTRINE_PERSIAN];
			}
			
			doctrineIndex = rand_int(0,doctrine_doctrinesAncient.length);
			doctrine_player[player][0] = doctrine_doctrinesAncient[doctrineIndex];
			
			doctrineIndex = rand_int(0,doctrine_doctrinesAncient.length);
			doctrine_player[player][1] = doctrine_doctrinesAncient[doctrineIndex];
			
			doctrineIndex = rand_int(0,doctrine_doctrinesAncient.length);
			doctrine_player[player][2] = doctrine_doctrinesAncient[doctrineIndex];
			
			doctrine_doctrinesGunpowder = [ DOCTRINE_PIKESHOTT, DOCTRINE_OLDFASHIONED, DOCTRINE_ROYALISTS ];
			if ( getIndexOfString( doctrine_usesHorses, find_nation(player) ) != -1 ) {
				doctrine_doctrinesGunpowder = [DOCTRINE_MONGOL];
			}
			doctrineIndex = rand_int(0,doctrine_doctrinesGunpowder.length);
			doctrine_player[player][3] = doctrine_doctrinesGunpowder[doctrineIndex];
			
			doctrine_doctrinesEnlightenment = [ DOCTRINE_GRENADIERS, DOCTRINE_LIGHTBRIGADE, DOCTRINE_OTTOMAN ];
			if ( getIndexOfString( doctrine_usesMusketeers, find_nation(player) ) != -1 ) {
				doctrine_doctrinesEnlightenment = [ DOCTRINE_GRENADIERS, DOCTRINE_SKERMISHERS, DOCTRINE_LIGHTBRIGADE, DOCTRINE_PRUSSIAN, DOCTRINE_OTTOMAN ];	
			}
			if ( getIndexOfString( doctrine_usesEnlightenmentRC, find_nation(player) ) != -1 ) {
				doctrine_doctrinesEnlightenment = [DOCTRINE_LIGHTBRIGADE];
			}
			doctrineIndex = rand_int(0,doctrine_doctrinesEnlightenment.length);
			doctrine_player[player][4] = doctrine_doctrinesEnlightenment[doctrineIndex];
			
			doctrine_doctrinesIndustrial = [ DOCTRINE_ARTILLERYCORP, DOCTRINE_MOBILECORP, DOCTRINE_HEAVYCORP, DOCTRINE_DEATHCORP, DOCTRINE_EXPEDITIONARY ];
			doctrineIndex = rand_int(0,doctrine_doctrinesIndustrial.length);
			doctrine_player[player][5] = doctrine_doctrinesIndustrial[doctrineIndex];
						
			doctrine_doctrinesModern = [ DOCTRINE_EXPEDITIONARY, DOCTRINE_BLITZKRIEG, DOCTRINE_HUMANWAVE, DOCTRINE_ARMOURED ];
			doctrineIndex = rand_int(0,doctrine_doctrinesModern.length);
			doctrine_player[player][6] = doctrine_doctrinesModern[doctrineIndex];
					
			doctrine_doctrinesInformation = [ DOCTRINE_MECHANISED, DOCTRINE_HEAVY, DOCTRINE_ARIAL ];
			doctrineIndex = rand_int(0,doctrine_doctrinesInformation.length);
			doctrine_player[player][7] = doctrine_doctrinesInformation[doctrineIndex];
			
		}
		acension_playersPerAge = (int)((get_ending_age() - get_starting_age())/core_playerCounter);
		if ( acension_playersPerAge*core_playerCounter <= get_ending_age() - get_starting_age() ) {
			acension_playersPerAge = acension_playersPerAge + 1;
		}
		if ( acension_playersPerAge*core_playerCounter <= get_ending_age() - get_starting_age() ) {
			acension_playersPerAge = acension_playersPerAge + 1;
		}
		
		set_timer("gameTick", 32);
		enable_trigger("doGameTick");
		
		set_timer("minuteTickTick", 60);
		enable_trigger("doMinuteTick");
		
		set_timer("cityTick", events_cityTickBase/core_playerCounter);
		enable_trigger("doCityTick");
		
		enable_trigger("general_createGeneral");
		set_timer("greatGeneralTimer", 60);
		
		enable_trigger("setDifficulty");
		
		print_game_msg("Initialisation Finished.");	
		
		int choice_upkeep = popup_choice($S("Enable Upkeep?"),$S("Yes"), $S("No"));
		if ( choice_upkeep == 1 ) {
			upkeep_useUpkeep = 1;
			int choice_upkeepRate = popup_choice($S("Upkeep Rate"),$S("Normal"), $S("x2"), $S("x4"));
			if ( choice_upkeepRate == 0 ) {
				print_game_msg("Upkeep Enabled - rate x1");
				upkeep_rate = 1;
			} else if ( choice_upkeepRate == 1 ) {
				print_game_msg("Upkeep Enabled - rate x2");
				upkeep_rate = 2;
			} else {
				print_game_msg("Upkeep Enabled - rate x4");
				upkeep_rate = 4;
			}
			int choice_upkeepAiModifier = popup_choice($S("Upkeep AI Modifier"),$S("Full Rate"), $S("Half Rate"), $S("No Upkeep"));
			if ( choice_upkeepAiModifier == 0 ) {
				upkeep_aiModifier = 1;
			} else if ( choice_upkeepAiModifier == 1 ) {
				upkeep_aiModifier = 0.5;
			} else {
				upkeep_aiModifier = 0;
			}
		} else {
			print_game_msg("Upkeep Disabled");
			upkeep_useUpkeep = 0;
		}
		
		int choice_doctrine = popup_choice($S("Enable Doctrines?"),$S("Yes"), $S("No"));
		if ( choice_doctrine == 1 ) {
			print_game_msg("Doctrines Enabled");
			doctrine_useDoctrine = 1;
		} else {
			print_game_msg("Doctrines Disabled");
			doctrine_useDoctrine = 0;
		}
		
		int choice_timed = popup_choice($S("Enable Timed Ages?"),$S("Yes"), $S("No"), $S("Yes - Enhanced"));
		if ( choice_timed == 1 ) {
			print_game_msg("Timed Ages Disabled");
			timed_useTimed = 0;
		} else if ( choice_timed == 0 ) {
			print_game_msg("Timed Ages Enabled");
			timed_useTimed = 1;
		} else {
			print_game_msg("Enhanced Timed Ages Enabled");
			timed_useTimedEnchanced = 1;
		}
		if ( timed_useTimed == 1 ) {
			int choice_timedDuration = popup_choice($S("Game Duration"),$S("30 Mins"), $S("1 Hour"), $S("2 Hours"));
			if ( choice_timedDuration == 0 ) {
				timed_gameLength = 1800;
			} else if ( choice_timedDuration == 1 ) {
				timed_gameLength = 3600;
			} else {
				timed_gameLength = 7200;
			}
			int numberOfAges = get_ending_age() - get_starting_age() + 1;
			timed_timePerAge = (int)(timed_gameLength / numberOfAges);
			string ageTimers[] = ["Timer_ClassicalAge", "Timer_MedievalAge", "Timer_GunpowderAge", "Timer_EnlightenmentAge", "Timer_IndustrialAge", "Timer_ModernAge", "Timer_InformationAge"];
			
			// Disable all the age up techs
			for ( player = 1; player <= 8; player++) {
				disable_tech( player, "Classical Age");
				disable_tech( player, "Medieval Age");
				disable_tech( player, "Gunpowder Age");
				disable_tech( player, "Enlightenment Age");
				disable_tech( player, "Industrial Age");
				disable_tech( player, "Modern Age");
				disable_tech( player, "Information Age");
				enable_tech( player, ageTech[get_starting_age()-1] );
			}
			int timedTimer = 0;
			int timedTimerHelper = 1;
			for ( timedTimer = get_starting_age()-1; timedTimer < get_ending_age()-1; timedTimer++ ) {
				set_timer(ageTimers[timedTimer], timedTimerHelper*timed_timePerAge);
				timedTimerHelper++;
			}
		}
		if ( timed_useTimedEnchanced == 1 ) {
			int choice_timedDuration = popup_choice($S("Game Duration"),$S("30 Mins"), $S("1 Hour"), $S("2 Hours"));
			if ( choice_timedDuration == 0 ) {
				timed_gameLength = 1800;
			} else if ( choice_timedDuration == 1 ) {
				timed_gameLength = 3600;
			} else {
				timed_gameLength = 7200;
			}
			int numberOfAges = get_ending_age() - get_starting_age() + 1;
			timed_timePerAge = (int)(timed_gameLength / numberOfAges);
			
			// Disable all the age up techs
			for ( player = 1; player <= 8; player++) {
				disable_tech( player, "Classical Age");
				disable_tech( player, "Medieval Age");
				disable_tech( player, "Gunpowder Age");
				disable_tech( player, "Enlightenment Age");
				disable_tech( player, "Industrial Age");
				disable_tech( player, "Modern Age");
				disable_tech( player, "Information Age");
				enable_tech( player, ageTech[get_starting_age()-1] );
			}
			int timedTimer = 0;
			int timedTimerHelper = 1;
			int ageTimes[] = [-1,-1,-1,-1,-1,-1,-1,-1];
			for ( timedTimer = get_starting_age()-1; timedTimer < get_ending_age()-1; timedTimer++ ) {
				ageTimes[timedTimer+1] = timedTimerHelper*timed_timePerAge;
				timedTimerHelper++;
			}
			ageTimes[get_starting_age()-1] = 0;
			if ( ageTimes[1] != -1 ) {
				set_timer("Timer_1000bc", (int)( ageTimes[1] ) );
				set_timer("Timer_300bc", (int)( ageTimes[1]+timed_timePerAge*0.5 ) ); // cataphracts
			}
			if ( ageTimes[2] != -1 ) {
				set_timer("Timer_400ad", (int)( ageTimes[2] ) );
				set_timer("Timer_800ad", (int)( ageTimes[2]+timed_timePerAge*1.5 ) ); // knights
			}
			if ( ageTimes[3] != -1 ) {
				set_timer("Timer_1200ad", (int)( ageTimes[3] ) );
				set_timer("Timer_1340ad", (int)( ageTimes[3]+timed_timePerAge*0.35 ) ); // gunpowder
				set_timer("Timer_1450ad", (int)( ageTimes[3]+timed_timePerAge*0.625 ) ); // arquebus
				set_timer("Timer_1520ad", (int)( ageTimes[3]+timed_timePerAge*0.8 ) ); // musket
			}
			if ( ageTimes[4] != -1 ) {
				set_timer("Timer_1600ad", (int)( ageTimes[4] ) );
				set_timer("Timer_1750ad", (int)( ageTimes[5]+timed_timePerAge*0.5 ) ); // rifles/skirmishers
				set_timer("Timer_1840ad", (int)( ageTimes[5]+timed_timePerAge*0.8 ) ); // breach loading
			}
			if ( ageTimes[5] != -1 ) {
				set_timer("Timer_1900ad", (int)( ageTimes[5] ) );
				set_timer("Timer_1915ad", (int)( ageTimes[5]+timed_timePerAge*0.5 ) ); // tanks
			}
			if ( ageTimes[6] != -1 ) {
				set_timer("Timer_1930ad", (int)( ageTimes[6] ) );
				set_timer("Timer_1950ad", (int)( ageTimes[6]+timed_timePerAge*0.5 ) ); // nukes
			}
			if ( ageTimes[7] != -1 ) {
				set_timer("Timer_1970ad", (int)( ageTimes[7] ) );
				set_timer("Timer_1990ad", (int)( ageTimes[7]+timed_timePerAge*0.5 ) ); // MRLS
			}
		}
		
		if ( timed_useTimed == 0 && timed_useTimedEnchanced == 0 ) {
			int choice_ascension = popup_choice($S("Enable Age Locking?"),$S("Yes"), $S("No"));
			if ( choice_ascension == 1 ) {
				print_game_msg("Age Locking Script Enabled");
				acension_useAscension = 1;
			} else {
				print_game_msg("Age Locking Script Disabled");
				acension_useAscension = 0;
			}
			if ( get_ending_age() == 4 ) {
				// if last age is gunpowder age then do we want to disable gunpowder units?
				int choice_noGunpowder = popup_choice($S("No Gunpowder?"),$S("Yes"), $S("No"));
				if ( choice_noGunpowder == 1 ) {
					print_game_msg("No Gunpowder Allowed");
					disable_type( "Arquebusiers" );
					disable_type( "Janissaries" );
					disable_type( "Janissaries" );
					disable_type( "Tercios" );
					disable_type( "Arqimmortal" );
					disable_type( "Dragoon" );
					disable_type( "Camel Raider" );
					disable_type( "Mameluke" );
					disable_type( "Conquistador" );
					disable_type( "Musket Horse" );
					disable_type( "Gun Mahout" );
					disable_type( "Bombard" );
					disable_type( "Basilica Bombard" );
					disable_type( "Corvette" );
					disable_type( "Fluyt" );
					disable_type( "Frigate" );
					disable_type( "Siegeship" );
					disable_type( "Bomb Vessel" );
					disable_type( "Bandeirantes" );
					disable_type( "Galleon" );
				} else {
					print_game_msg("Gunpowder Is Allowed");
				}
			}
			int choice_unitTweaks = popup_choice($S("Enable Unit Tweaks?"),$S("Yes"), $S("No"));
			if ( choice_ascension == 1 ) {
				print_game_msg("Unit Tweaks Enabled");
				set_object_type_max_range("Artillery", 23);
				set_object_type_max_range("Siege Mortar", 23);
				set_object_type_max_range("Howitzer", 23);
				set_object_type_max_range("Katyusha Rocket", 24);
				rename_type("Commando", "Pioneer");
				rename_type("Special Forces", "Commando");
				rename_type("Rusiny Lancer", "Tartar Lancer");
				rename_type("Legions", "Cohor");
				rename_type("Caesar's Legions", "Legio");
				rename_type("Praetorian Guards", "Palatini");
				rename_type("Spitamenes", "Genghis Khan");
				rename_type("Ptolemy", "Ceaser");
				rename_type("Porus", "Hannibal");
				rename_type("Parmenio", "Charlemagne");
				rename_type("Djezzar", "Saladin");
				rename_type("Memnon", "Chu-ko Liang");
				set_preq("Commando", "Enlightenment Age", "Enlightenment Age", "Enlightenment Age");
				set_preq("Special Forces", "Industrial Age", "Industrial Age", "Industrial Age");	
			} else {
				print_game_msg("Unit Tweaks Disabled");
			}
		}
	}
	
	int playerRank[] = getRanks();
	// local variables set up
	int i = 0; // so we can use i elsewhere without issue
	int player = -1;
	int playerAge = 0;
	int randInt = 0;
	int cityCount = 0;
	int pickedCity = 0;
	int playerCityCount = 0;
	int x = 0;
	int y = 0;
	int cities[][]; // [player, cityid]
	
	// we need to count the players for use in scalability
	int playerCount = 0;
	for ( player = 1; player <= 8; player++) {
		if (core_playerIsPlaying[player] == 1) {
			playerCount++;
			playerCityCount = num_cities(player);
			cityCount = cityCount + playerCityCount;
			for ( i = 1; i <= playerCityCount; i++ ) {
				cities[cities.length] = [player, i];
				// pickedCity = find_city_id(find_city_with_num(player, i));
			}
			
		}
	}

	// ordinary timed game
	trigger doTimedAges_Classical ( timer_expired("Timer_ClassicalAge") && timed_useTimed == 1 ) {
		// Classical age
		print_game_msg("Classical Age");
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Classical Age" );
		}
	}
	trigger doTimedAges_Medieval ( timer_expired("Timer_MedievalAge") && timed_useTimed == 1 ) {
		// Medieval 
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Medieval Age" );
		}
	}
	trigger doTimedAges_Gunpowder ( timer_expired("Timer_GunpowderAge") && timed_useTimed == 1 ) {
		// Gunpowder age
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Gunpowder Age" );
		}
	}
	trigger doTimedAges_Enlightenment ( timer_expired("Timer_EnlightenmentAge") && timed_useTimed == 1 ) {
		// Enlightenment age
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Enlightenment Age" );
		}
	}
	trigger doTimedAges_Industrial ( timer_expired("Timer_IndustrialAge") && timed_useTimed == 1 ) {
		// Industrial age
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Industrial Age" );
		}
	}
	trigger doTimedAges_Modern ( timer_expired("Timer_ModernAge") && timed_useTimed == 1 ) {
		// Modern age
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Modern Age" );
		}
	}
	trigger doTimedAges_Information ( timer_expired("Timer_InformationAge") && timed_useTimed == 1 ) {
		// Information age
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Information Age" );
		}
	}
	
	
	// we shall set up the narrative timed game events here
	trigger doNarrativeAges_1000bc ( timer_expired("Timer_1000bc") && timed_useTimedEnchanced == 1 ) {
		// Classical age
		eventDialog( events_modalDialog, "1000bc Classical Age" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Classical Age" );
		}
	}
	trigger doNarrativeAges_300bc ( timer_expired("Timer_300bc") && timed_useTimedEnchanced == 1 ) {
		// Cataphract
		eventDialog( events_modalDialog, "300bc Macedonian Cataphracts" );
	}
	trigger doNarrativeAges_400 ( timer_expired("Timer_400ad") && timed_useTimedEnchanced == 1 ) {
		// medieval
		eventDialog( events_modalDialog, "400ad Middle Ages" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Medieval Age" );
		}
	}
	trigger doNarrativeAges_800 ( timer_expired("Timer_800ad") && timed_useTimedEnchanced == 1 ) {
		// knights
		eventDialog( events_modalDialog, "800ad First Knights" );
	}
	trigger doNarrativeAges_1200 ( timer_expired("Timer_1200ad") && timed_useTimedEnchanced == 1 ) {
		// Late Middle Ages
		eventDialog( events_modalDialog, "1200ad Late Middle Ages" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Gunpowder Age" );
		}
	}
	trigger doNarrativeAges_1340 ( timer_expired("Timer_1340ad") && timed_useTimedEnchanced == 1 ) {
		// Handcannons and Bombards
		eventDialog( events_modalDialog, "1340ad Gunpowder Reaches Europe" );
	}
	trigger doNarrativeAges_1450 ( timer_expired("Timer_1450ad") && timed_useTimedEnchanced == 1 ) {
		// Arquebusiers
		eventDialog( events_modalDialog, "1450ad Arquebus invented" );
	}
	trigger doNarrativeAges_1520 ( timer_expired("Timer_1520ad") && timed_useTimedEnchanced == 1 ) {
		// Musket
		eventDialog( events_modalDialog, "1520ad Musket invented" );
	}
	trigger doNarrativeAges_1600 ( timer_expired("Timer_1600ad") && timed_useTimedEnchanced == 1 ) {
		// Enlightenment
		eventDialog( events_modalDialog, "1600ad The ages of Enlightenment" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Enlightenment Age" );
		}
	}
	trigger doNarrativeAges_1750 ( timer_expired("Timer_1750ad") && timed_useTimedEnchanced == 1 ) {
		// rifles
		eventDialog( events_modalDialog, "1750ad Rifled muskets and skirmishers" );
	}
	trigger doNarrativeAges_1830 ( timer_expired("Timer_1830ad") && timed_useTimedEnchanced == 1 ) {
		// breach loading
		eventDialog( events_modalDialog, "1830ad Breach loading weapons invented" );
	}
	trigger doNarrativeAges_1880 ( timer_expired("Timer_1880ad") && timed_useTimedEnchanced == 1 ) {
		// big ships, first skyscraper, smokeless powder, machine gun
		eventDialog( events_modalDialog, "1880ad The times are changing. Skyscrapers, metal ships and smokeless powder." );
	}
	trigger doNarrativeAges_1900 ( timer_expired("Timer_1900ad") && timed_useTimedEnchanced == 1 ) {
		// Industrial
		eventDialog( events_modalDialog, "1900ad Welcome to the age of industry and opportunity" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Industrial Age" );
		}
	}
	trigger doNarrativeAges_1915 ( timer_expired("Timer_1915ad") && timed_useTimedEnchanced == 1 ) {
		// Tanks
		eventDialog( events_modalDialog, "1915ad Metal landships. The tank is invented." );
	}
	trigger doNarrativeAges_1930 ( timer_expired("Timer_1930ad") && timed_useTimedEnchanced == 1 ) {
		// Modern
		eventDialog( events_modalDialog, "1930ad Welcome to the Modern age" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Modern Age" );
		}
	}
	trigger doNarrativeAges_1950 ( timer_expired("Timer_1950ad") && timed_useTimedEnchanced == 1 ) {
		// Nukes
		eventDialog( events_modalDialog, "1950ad Now I am become death, the destroyer of worlds." );
	}
	trigger doNarrativeAges_1970 ( timer_expired("Timer_1970ad") && timed_useTimedEnchanced == 1 ) {
		// Information
		eventDialog( events_modalDialog, "1970ad The age of information" );
		for ( player = 1; player <= 8; player++) {
			enable_tech( player, "Information Age" );
		}
	}
	trigger doNarrativeAges_1990 ( timer_expired("Timer_1990ad") && timed_useTimedEnchanced == 1 ) {
		// MLRS
		eventDialog( events_modalDialog, "1990ad This is the end of history." );
	}
	
	// we want to randomise difficulty while recording what the chosen difficulty is.
	trigger setDifficulty ( 1 == 1 ) {
		for ( player = 1; player <= 8; player++) {
			baseDifficulty = get_leader_difficulty(player);
			newDifficulty = (int)max_val( 1, min_val( 5, get_leader_difficulty(player)+rand_int(-1,2)));
			set_leader_difficulty( player, newDifficulty );
		}
	}
	
	trigger doCityTick ( timer_expired("cityTick") ) {
		enable_trigger("doCityTick");
		set_timer("cityTick", events_cityTickBase/cityCount);
		
		// Famine
		if ( events_famine == 1 ) {
			// first we pick a city
			randInt = rand_int(0, cities.length);
			player = cities[randInt][0];
			cityid = cities[randInt][1];
			
			pickedCity = find_city_id(find_city_with_num(player, cityid));
			x = object_position_x(player, pickedCity);
			y = object_position_y(player, pickedCity);
			cityName = "";
			for ( randInt = 0; randInt < cityid; randInt++ ) {
				cityName = find_city_name(player);
			}
			
			// now we do stuff to that city
			int famine_farmId = find_build_at_city( player, cityName, "Farm", 1 );
			if ( famine_farmId != 0 && famine_farmId != -1 ) {
				textString = "Famine has lead to farmland loss in "+cityName;
				chat(player,player,textString);
				destroy_building(player, famine_farmId);
			}
		}

	}

	
	// we want to do age locking stuff
	if ( acension_useAscension == 1 ) {
		int acension_ages[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
		for ( player = 1; player <= 8; player++) {
			for ( i = 0; i < 8; i++ ) {
				if ( age(player) >= i && !is_defeated( player ) ) {
					acension_ages[i] = acension_ages[i]+1;
				}
			}
		}
		// so now the acension_ages contains a list of how many players per age
		i = 0;
		for ( i = 0; i < get_ending_age() - get_starting_age()+1; i++ ) {
			if ( acension_ages[i+get_starting_age()-1] >= core_playerCounter - ( i * acension_playersPerAge ) ) {
				for ( player = 1; player <= 8; player++) {
					if ( age(player) < get_starting_age()-1+i ) {
						disable_tech( player, ageTech[get_starting_age()-1+i]);
					}
				}
			} else {
				for ( player = 1; player <= 8; player++) {
					enable_tech( player, ageTech[get_starting_age()-1+i]);
				}
			}
		}
	}

	trigger doMinuteTick ( timer_expired("minuteTickTick") ) {
		enable_trigger("doMinuteTick");
		set_timer("minuteTickTick", 60);
		for ( player = 1; player <= 8; player++) {
			if ( general_useGeneral == 1 && general_player[player] != 0 ) {
				// so this player have an active great general
				give_good(player, "Food", 100);
				give_good(player, "Wood", 100);
				give_good(player, "Gold", 100);
				string pickedUnit;
				if ( age(player) > 4 ) {
					pickedUnit = find_current_upgrade(player, "Slingers");
				} else {
					pickedUnit = find_current_upgrade(player, "Hoplites");
				}
				if ( general_player[player] == 2 && age(player) == 1 ) {
					string potentialUnits[] = [ "Phalanx", "Phalanx", "Cataphract" ];
					pickedUnit = find_current_upgrade(player, potentialUnits[rand_int(0, potentialUnits.length)]);
				} else if ( general_player[player] == 3 && age(player) == 1 ) {
					string potentialUnits[] = [ "Anusiya", "Javelineers", "War Chariot", "Anusiya Archers" ];
					pickedUnit = potentialUnits[rand_int(0, potentialUnits.length)];
				} else if ( general_player[player] == 4 && age(player) == 4 ) {
					pickedUnit = "Imperial Guard";
				} else if ( find_nation(player) == "british" && age(player) == 4 ) {
					pickedUnit = "Red Coats";
				} else if ( find_nation(player) == "germans" && age(player) == 4 ) {
					pickedUnit = "Junkers";
				} else if ( find_nation(player) == "lakota" ) {
					pickedUnit = "Horse Archer";
					pickedUnit = find_current_upgrade(player, "Horse Archer");
				} else if ( find_nation(player) == "mongols" && ( age(player) < 4 ) ) {
					string potentialUnits[] = [ "Horse Archer", "Horse Archer", "Cataphract" ];
					pickedUnit = potentialUnits[rand_int(0, potentialUnits.length)];
				}
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				create_unit(player, x, y, pickedUnit, 1);
			}
		}
	}
	
	trigger doGameTick ( timer_expired("gameTick") ) {
		enable_trigger("doGameTick");
		set_timer("gameTick", 32);
		
		for ( player = 1; player <= 8; player++) {
			if ( upkeep_useUpkeep == 1 ) {
				// first we will do the upkeep
				float totalUnit 		= num_units(player);
				float totalFoot 		= num_unit_category(player,"Foot");
				float totalMounted 	= num_unit_category(player,"Mounted");
				float totalMech 		= num_unit_category(player,"Mech ");
				float totalArtillery 	= num_unit_category(player,"Artillery");
				float totalCommand 	= num_unit_category(player,"Command");
				float totalCivilian 	= num_unit_category(player,"Civilian");
				float totalSail 		= num_unit_category(player,"Sail");
				float totalNaval 		= num_unit_category(player,"Naval");
				float totalAir 		= num_unit_category(player,"Air");
				float totalBuildings 	= num_buildings(player);
				float totalCaravan 	= num_type(player, "Caravan") + num_type(player, "Armed Caravan");
				float totalSupply 	= num_type(player, "Supply Wagon") + num_type(player, "Armed Supply Wagon");
				
				float ageModifier = 1+(age(player)/7); // upkeep gets more expensive for more ages up civilisations
				ageModifier = ageModifier * upkeep_rate;
				if ( !is_human(player) ) {
					ageModifier = ageModifier * upkeep_aiModifier;
				}
				float totalFood 	= 0;
				float totalGold 	= 0;
				float totalOil	= 0;
				float totalWood	= 0;
				float totalMetal	= 0;
				
				if ( age(player) < 3 ) {
									
					//pre gunpowder
					totalFood 	= ageModifier*( totalUnit + totalMounted );
					totalGold 	= ageModifier*2*( totalUnit - totalCivilian );
					totalWood	= ageModifier*( 2*totalSail + 2*totalBuildings );
					totalMetal	= ageModifier*( 2*totalArtillery );
					
					set_base_rate(player, "Food", (int)-totalFood);
					set_base_rate(player, "Wealth", (int)-totalGold);
					set_base_rate(player, "Timber", (int)-totalWood);
					set_base_rate(player, "Metal", (int)-totalMetal);
					//textString = "Upkeep: "+totalFood+"f "+totalWood+"w "+totalMetal+"m "+totalGold+"g";
					//chat(player,player,textString);
					
				} else if( age(player) < 5 ) {
					//pre indsutrial
					totalFood 	= ageModifier*( totalUnit + totalMounted );
					totalGold 	= ageModifier*2*( totalUnit - totalCivilian );
					totalWood	= ageModifier*( 2*totalSail + 2*totalBuildings );
					totalMetal	= ageModifier*( 2*totalArtillery + totalSail );
					
					set_base_rate(player, "Food", (int)-totalFood);
					set_base_rate(player, "Wealth", (int)-totalGold);
					set_base_rate(player, "Timber", (int)-totalWood);
					set_base_rate(player, "Metal", (int)-totalMetal);
					//textString = "Upkeep: "+totalFood+"f "+totalWood+"w "+totalMetal+"m "+totalGold+"g";
					//chat(player,player,textString);
					
				} else {
					//post industrial
					totalFood 	= ageModifier*( totalUnit + totalMounted );
					totalGold 	= ageModifier*2*( totalUnit - totalCivilian );
					totalOil	= ageModifier*2*( totalMech + totalNaval + totalAir + totalCaravan + totalSupply + totalCommand );
					totalWood	= ageModifier*( 2*totalSail + 2*totalBuildings );
					totalMetal	= ageModifier*( totalMech + 2*totalArtillery + totalNaval );
					
					set_base_rate(player, "Food", (int)-totalFood);
					set_base_rate(player, "Wealth", (int)-totalGold);
					set_base_rate(player, "Timber", (int)-totalWood);
					set_base_rate(player, "Metal", (int)-totalMetal);
					set_base_rate(player, "Oil", (int)-totalOil);
					//textString = "Upkeep: "+totalFood+"f "+totalWood+"w "+totalMetal+"m "+totalOil+"o "+totalGold+"g";
					//chat(player,player,textString);
				}
				int foodGatherRate = gather_rate(player, "Food");
				int woodGatherRate = gather_rate(player, "Wood");
				if ( foodGatherRate < 10 ) {
					set_base_rate(player, "Food", ( (int)-totalFood ) + ( 10 - foodGatherRate ) );
				}
				if ( woodGatherRate < 10 ) {
					set_base_rate(player, "Wood", ( (int)-totalWood ) + ( 10 - woodGatherRate ) );
				}
			}

			if ( doctrine_useDoctrine == 1 ) {
				if ( !is_human(player) && core_playerIsPlaying[player] == 1 ) {
					if ( (float)num_unit_category(player,"Civilian")/population_cap(player) < 0.1 ) {
						train_unit_with_cost(player, 1, "Citizen");
					} else {
						// we need to apply the players doctrine
						playerAge = age(player);
						int pickedDoctrineIndex = rand_int(0, doctrine_unit[doctrine_player[player][playerAge]].length);
						string pickedDoctrineUnit = find_current_upgrade(player, doctrine_unit[doctrine_player[player][playerAge]][pickedDoctrineIndex]);
						string pickedDoctrinePercent = doctrine_percent[doctrine_player[player][playerAge]][pickedDoctrineIndex];
						
						if ( 100*num_type(player, pickedDoctrineUnit)/num_military_units(player) < pickedDoctrinePercent ) {
							train_unit_with_cost(player, 1, pickedDoctrinePercent);
						}
					}
				}
			}
		}
	}
	
	trigger general_createGeneral ( general_useGeneral == 1 && timer_expired("greatGeneralTimer") ) {
		enable_trigger("general_createGeneral");
		set_timer("greatGeneralTimer", 600);
		// first off we need to pick a player
		int viableComputerPlayers[];
		for ( player = 1; player <= 8; player++) {
			if ( core_playerIsPlaying[player] == 1 && !is_human(player) && general_player[player] == 0 ) {
				viableComputerPlayers[viableComputerPlayers.length] = player;
			}
		}
		if ( viableComputerPlayers.length == 0 ) {
			// there are no viable players for generalship so lets wait for a few seconds and try again
			enable_trigger("general_createGeneral");
			set_timer("greatGeneralTimer", 5);
		} else {
			// we have viable players so let us pick one.
			player = viableComputerPlayers[rand_int(0, viableComputerPlayers.length)];
			// next we work out what kind of general they're eligible for
			// 0 no general
			// 1 generic
			// 2 alexander
			// 3 darius
			// 4 napoleon
			if ( general_canAlexander == 1 && age(player) == 1 && find_nation(player) == "greeks" ) {
				general_canAlexander = 0;
				general_player[player] = 2;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Alexander", 1);
				general_generalUnit = create_unit(player, x, y, "Royal Companion", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canDarius == 1 && age(player) == 1 && find_nation(player) == "persian" ) {
				general_canDarius = 0;
				general_player[player] = 3;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Darius", 1);
				general_generalUnit = create_unit(player, x, y, "Heavy Chariot", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canNapoleon == 1 && age(player) == 4 && find_nation(player) == "french" ) {
				general_canNapoleon = 0;
				general_player[player] = 4;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Napoleon", 1);
				general_generalUnit = create_unit(player, x, y, "Continental Marines", 6);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canGenghis == 1 && age(player) == 3 && find_nation(player) == "mongols" ) {
				general_canGenghis = 0;
				general_player[player] = 5;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Spitamenes", 1);
				general_generalUnit = create_unit(player, x, y, "Golden Horde", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canCeaser == 1 && age(player) == 1 && find_nation(player) == "romans" ) {
				general_canCeaser = 0;
				general_player[player] = 6;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Ptolemy", 1);
				general_generalUnit = create_unit(player, x, y, "Caesar's Legions", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canHannibal == 1 && age(player) == 1 && find_nation(player) == "spanish" ) {
				general_canHannibal = 0;
				general_player[player] = 7;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Porus", 1);
				general_generalUnit = create_unit(player, x, y, "War Elephant", 6);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canCharlemagne == 1 && age(player) == 2 && ( find_nation(player) == "french" || find_nation(player) == "germans" ) ) {
				general_canCharlemagne = 0;
				general_player[player] = 8;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Parmenio", 1);
				general_generalUnit = create_unit(player, x, y, "Heavy Knight", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canIndianGeneral == 1 && age(player) == 1 && ( find_nation(player) == "indian" ) ) {
				general_canIndianGeneral = 0;
				general_player[player] = 9;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Chandragupta Maurya", 1);
				general_generalUnit = create_unit(player, x, y, "Mahout", 3);
				rename_type( "Chandragupta Maurya", "Chandragupta Maurya" );
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canIndianGeneral == 1 && age(player) == 2 && ( find_nation(player) == "indian" ) ) {
				general_canIndianGeneral = 0;
				general_player[player] = 9;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Chandragupta Maurya", 1);
				general_generalUnit = create_unit(player, x, y, "Mahout", 5);
				rename_type( "Chandragupta Maurya", "Harsha" );
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canIndianGeneral == 1 && age(player) == 3 && ( find_nation(player) == "indian" ) ) {
				general_canIndianGeneral = 0;
				general_player[player] = 9;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Chandragupta Maurya", 1);
				rename_type( "Chandragupta Maurya", "Babur" );
				general_generalUnit = create_unit(player, x, y, "Culverin Mahout", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canSaladin == 1 && age(player) == 2 && ( find_nation(player) == "egyptians" || find_nation(player) == "turks" ) ) {
				general_canSaladin = 0;
				general_player[player] = 10;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Djezzar", 1);
				general_generalUnit = create_unit(player, x, y, "Heavy Knight", 3);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_canChukoLiang == 1 && age(player) == 2 && ( find_nation(player) == "chinese" ) ) {
				general_canChukoLiang = 0;
				general_player[player] = 11;
				pickedCity = find_city_id(find_capital(player));
				x = object_position_x(player, pickedCity);
				y = object_position_y(player, pickedCity);
				general_generalUnit = create_unit(player, x, y, "Memnon", 1);
				general_generalUnit = create_unit(player, x, y, "Elite Light Cavalry", 4);
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else if ( num_type(player, "The Despot") || num_type(player, "The Senator") || num_type(player, "The Monarch") || num_type(player, "The President") || num_type(player, "The Comrade") || num_type(player, "The CEO") ) {
				general_player[player] = 1;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+2));
				set_leader_difficulty( player, newDifficulty );
			} else {
				// so they have no patriot so well try and find someone else.
				general_player[player] = 0;
				enable_trigger("general_createGeneral");
				set_timer("greatGeneralTimer", 5);
			}
		}
	}
	
	if ( general_useGeneral ) {
		// we need to loop thru players to see if they've lost their general
		for ( player = 1; player <= 8; player++) {
			if ( general_player[player] == 2 && num_type(player, "Alexander") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 3 && num_type(player, "Darius") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 4 && num_type(player, "Napoleon") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 5 && num_type(player, "Spitamenes") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 6 && num_type(player, "Ptolemy") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 7 && num_type(player, "Porus") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 8 && num_type(player, "Parmenio") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 9 && num_type(player, "Chandragupta Maurya") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 10 && num_type(player, "Djezzar") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 11 && num_type(player, "Memnon") == 0 ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			} else if ( general_player[player] == 1 && !(num_type(player, "The Despot") || num_type(player, "The Senator") || num_type(player, "The Monarch") || num_type(player, "The President") || num_type(player, "The Comrade") || num_type(player, "The CEO")) ) {
				general_player[player] = 0;
				newDifficulty = (int)max_val( 1, min_val( 5, baseDifficulty+rand_int(-1, 2)));
				set_leader_difficulty( player, newDifficulty );
			}
		}
	}
}
